{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\nimport CommentAction from './CommentAction';\nimport CommentActions from './CommentActions';\nimport CommentAuthor from './CommentAuthor';\nimport CommentAvatar from './CommentAvatar';\nimport CommentContent from './CommentContent';\nimport CommentGroup from './CommentGroup';\nimport CommentMetadata from './CommentMetadata';\nimport CommentText from './CommentText';\n/**\r\n * A comment displays user feedback to site content.\r\n */\n\nfunction Comment(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content;\n  var classes = cx(useKeyOnly(collapsed, 'collapsed'), 'comment', className);\n  var rest = getUnhandledProps(Comment, props);\n  var ElementType = getElementType(Comment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nComment.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\"];\nComment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comment can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nComment.Author = CommentAuthor;\nComment.Action = CommentAction;\nComment.Actions = CommentActions;\nComment.Avatar = CommentAvatar;\nComment.Content = CommentContent;\nComment.Group = CommentGroup;\nComment.Metadata = CommentMetadata;\nComment.Text = CommentText;\nexport default Comment;","map":{"version":3,"sources":["C:/Users/David/Documents/GitHub/ContactManager/frontend/node_modules/semantic-ui-react/dist/es/views/Comment/Comment.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","CommentAction","CommentActions","CommentAuthor","CommentAvatar","CommentContent","CommentGroup","CommentMetadata","CommentText","Comment","props","className","children","collapsed","content","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","node","string","bool","contentShorthand","Author","Action","Actions","Avatar","Content","Group","Metadata","Text"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,UAA5E,QAA8F,WAA9F;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;;;;AAIA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,OAAO,GAAGJ,KAAK,CAACI,OAHpB;AAIA,MAAIC,OAAO,GAAGtB,EAAE,CAACO,UAAU,CAACa,SAAD,EAAY,WAAZ,CAAX,EAAqC,SAArC,EAAgDF,SAAhD,CAAhB;AACA,MAAIK,IAAI,GAAGjB,iBAAiB,CAACU,OAAD,EAAUC,KAAV,CAA5B;AACA,MAAIO,WAAW,GAAGnB,cAAc,CAACW,OAAD,EAAUC,KAAV,CAAhC;AACA,SAAOf,KAAK,CAACuB,aAAN,CAAoBD,WAApB,EAAiCzB,QAAQ,CAAC,EAAD,EAAKwB,IAAL,EAAW;AACzDL,IAAAA,SAAS,EAAEI;AAD8C,GAAX,CAAzC,EAEHnB,aAAa,CAACuB,KAAd,CAAoBP,QAApB,IAAgCE,OAAhC,GAA0CF,QAFvC,CAAP;AAGD;;AAEDH,OAAO,CAACW,YAAR,GAAuB,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,WAAhC,EAA6C,SAA7C,CAAvB;AACAX,OAAO,CAACY,SAAR,GAAoBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC1D;AACAC,EAAAA,EAAE,EAAE5B,eAAe,CAAC4B,EAFsC;;AAI1D;AACAb,EAAAA,QAAQ,EAAElB,SAAS,CAACgC,IALsC;;AAO1D;AACAf,EAAAA,SAAS,EAAEjB,SAAS,CAACiC,MARqC;;AAU1D;AACAd,EAAAA,SAAS,EAAEnB,SAAS,CAACkC,IAXqC;;AAa1D;AACAd,EAAAA,OAAO,EAAEjB,eAAe,CAACgC;AAdiC,CAAxC,GAehB,EAfJ;AAgBApB,OAAO,CAACqB,MAAR,GAAiB3B,aAAjB;AACAM,OAAO,CAACsB,MAAR,GAAiB9B,aAAjB;AACAQ,OAAO,CAACuB,OAAR,GAAkB9B,cAAlB;AACAO,OAAO,CAACwB,MAAR,GAAiB7B,aAAjB;AACAK,OAAO,CAACyB,OAAR,GAAkB7B,cAAlB;AACAI,OAAO,CAAC0B,KAAR,GAAgB7B,YAAhB;AACAG,OAAO,CAAC2B,QAAR,GAAmB7B,eAAnB;AACAE,OAAO,CAAC4B,IAAR,GAAe7B,WAAf;AACA,eAAeC,OAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\r\nimport cx from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\r\nimport CommentAction from './CommentAction';\r\nimport CommentActions from './CommentActions';\r\nimport CommentAuthor from './CommentAuthor';\r\nimport CommentAvatar from './CommentAvatar';\r\nimport CommentContent from './CommentContent';\r\nimport CommentGroup from './CommentGroup';\r\nimport CommentMetadata from './CommentMetadata';\r\nimport CommentText from './CommentText';\r\n/**\r\n * A comment displays user feedback to site content.\r\n */\r\n\r\nfunction Comment(props) {\r\n  var className = props.className,\r\n      children = props.children,\r\n      collapsed = props.collapsed,\r\n      content = props.content;\r\n  var classes = cx(useKeyOnly(collapsed, 'collapsed'), 'comment', className);\r\n  var rest = getUnhandledProps(Comment, props);\r\n  var ElementType = getElementType(Comment, props);\r\n  return React.createElement(ElementType, _extends({}, rest, {\r\n    className: classes\r\n  }), childrenUtils.isNil(children) ? content : children);\r\n}\r\n\r\nComment.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\"];\r\nComment.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** Primary content. */\r\n  children: PropTypes.node,\r\n\r\n  /** Additional classes. */\r\n  className: PropTypes.string,\r\n\r\n  /** Comment can be collapsed, or hidden from view. */\r\n  collapsed: PropTypes.bool,\r\n\r\n  /** Shorthand for primary content. */\r\n  content: customPropTypes.contentShorthand\r\n} : {};\r\nComment.Author = CommentAuthor;\r\nComment.Action = CommentAction;\r\nComment.Actions = CommentActions;\r\nComment.Avatar = CommentAvatar;\r\nComment.Content = CommentContent;\r\nComment.Group = CommentGroup;\r\nComment.Metadata = CommentMetadata;\r\nComment.Text = CommentText;\r\nexport default Comment;"]},"metadata":{},"sourceType":"module"}