{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport Select from '../../addons/Select';\nimport Dropdown from '../../modules/Dropdown';\nimport FormField from './FormField';\n/**\r\n * Sugar for <Form.Field control={Select} />.\r\n * @see Form\r\n * @see Select\r\n */\n\nfunction FormSelect(props) {\n  var control = props.control,\n      options = props.options;\n  var rest = getUnhandledProps(FormSelect, props);\n  var ElementType = getElementType(FormSelect, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    control: control,\n    options: options\n  }));\n}\n\nFormSelect.handledProps = [\"as\", \"control\", \"options\"];\nFormSelect.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A FormField control prop. */\n  control: FormField.propTypes.control,\n\n  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */\n  options: PropTypes.arrayOf(PropTypes.shape(Dropdown.Item.propTypes)).isRequired\n} : {};\nFormSelect.defaultProps = {\n  as: FormField,\n  control: Select\n};\nexport default FormSelect;","map":{"version":3,"sources":["C:/Users/David/Documents/GitHub/ContactManager/frontend/node_modules/semantic-ui-react/dist/es/collections/Form/FormSelect.js"],"names":["_extends","PropTypes","React","customPropTypes","getElementType","getUnhandledProps","Select","Dropdown","FormField","FormSelect","props","control","options","rest","ElementType","createElement","handledProps","propTypes","process","env","NODE_ENV","as","arrayOf","shape","Item","isRequired","defaultProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,QAAmE,WAAnE;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA;;;;;;AAMA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,MACIC,OAAO,GAAGF,KAAK,CAACE,OADpB;AAEA,MAAIC,IAAI,GAAGR,iBAAiB,CAACI,UAAD,EAAaC,KAAb,CAA5B;AACA,MAAII,WAAW,GAAGV,cAAc,CAACK,UAAD,EAAaC,KAAb,CAAhC;AACA,SAAOR,KAAK,CAACa,aAAN,CAAoBD,WAApB,EAAiCd,QAAQ,CAAC,EAAD,EAAKa,IAAL,EAAW;AACzDF,IAAAA,OAAO,EAAEA,OADgD;AAEzDC,IAAAA,OAAO,EAAEA;AAFgD,GAAX,CAAzC,CAAP;AAID;;AAEDH,UAAU,CAACO,YAAX,GAA0B,CAAC,IAAD,EAAO,SAAP,EAAkB,SAAlB,CAA1B;AACAP,UAAU,CAACQ,SAAX,GAAuBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC7D;AACAC,EAAAA,EAAE,EAAElB,eAAe,CAACkB,EAFyC;;AAI7D;AACAV,EAAAA,OAAO,EAAEH,SAAS,CAACS,SAAV,CAAoBN,OALgC;;AAO7D;AACAC,EAAAA,OAAO,EAAEX,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACsB,KAAV,CAAgBhB,QAAQ,CAACiB,IAAT,CAAcP,SAA9B,CAAlB,EAA4DQ;AARR,CAAxC,GASnB,EATJ;AAUAhB,UAAU,CAACiB,YAAX,GAA0B;AACxBL,EAAAA,EAAE,EAAEb,SADoB;AAExBG,EAAAA,OAAO,EAAEL;AAFe,CAA1B;AAIA,eAAeG,UAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { customPropTypes, getElementType, getUnhandledProps } from '../../lib';\r\nimport Select from '../../addons/Select';\r\nimport Dropdown from '../../modules/Dropdown';\r\nimport FormField from './FormField';\r\n/**\r\n * Sugar for <Form.Field control={Select} />.\r\n * @see Form\r\n * @see Select\r\n */\r\n\r\nfunction FormSelect(props) {\r\n  var control = props.control,\r\n      options = props.options;\r\n  var rest = getUnhandledProps(FormSelect, props);\r\n  var ElementType = getElementType(FormSelect, props);\r\n  return React.createElement(ElementType, _extends({}, rest, {\r\n    control: control,\r\n    options: options\r\n  }));\r\n}\r\n\r\nFormSelect.handledProps = [\"as\", \"control\", \"options\"];\r\nFormSelect.propTypes = process.env.NODE_ENV !== \"production\" ? {\r\n  /** An element type to render as (string or function). */\r\n  as: customPropTypes.as,\r\n\r\n  /** A FormField control prop. */\r\n  control: FormField.propTypes.control,\r\n\r\n  /** Array of Dropdown.Item props e.g. `{ text: '', value: '' }` */\r\n  options: PropTypes.arrayOf(PropTypes.shape(Dropdown.Item.propTypes)).isRequired\r\n} : {};\r\nFormSelect.defaultProps = {\r\n  as: FormField,\r\n  control: Select\r\n};\r\nexport default FormSelect;"]},"metadata":{},"sourceType":"module"}